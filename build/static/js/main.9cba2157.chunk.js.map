{"version":3,"sources":["api/posts.ts","components/Posts.tsx","utils/hookForm.ts","components/FormPost.tsx","components/Create.tsx","components/Edit.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["url","getPosts","a","fetch","response","json","Error","getPost","id","deletePost","method","error","createPost","data","headers","body","JSON","stringify","editPost","Posts","useState","posts","setPosts","setError","history","useHistory","fetchData","result","handleDelete","useEffect","className","role","Fragment","onClick","push","scope","map","post","key","title","content","handleShow","initialState","lat","long","image_url","reducer","state","field","value","useHooks","useReducer","dispatch","disabled","setDisabled","onChange","e","target","name","checkDisabled","hasEmptyValue","Object","values","indexOf","FormPost","props","onSubmit","type","goBack","Create","Edit","withRouter","match","params","hasOwnProperty","alt","src","height","width","onError","App","path","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.9cba2157.chunk.js","sourcesContent":["\r\nimport { IPost } from \"types/post\";\r\nconst url = 'https://wf-challenge-yn8dgzymk9.herokuapp.com/api/v1/posts';\r\n\r\nconst getPosts = async () => {\r\n  try {\r\n    const response = await fetch(url);\r\n    return await response.json();\r\n  } catch (errorMessage) {\r\n    throw new Error(`An error occured while getting the posts: ${errorMessage}`);\r\n  };\r\n};\r\n\r\nconst getPost = async (id: string) => {\r\n  try {\r\n    const response = await fetch(`${url}/${id}`);\r\n    return await response.json();\r\n  } catch (errorMessage) {\r\n    throw new Error(`An error occured while getting the post: ${errorMessage}`);\r\n  }\r\n};\r\n\r\nconst deletePost = async (id: string) => {\r\n  try {\r\n    await fetch(`${url}/${id}`, {\r\n      method: 'DELETE',\r\n    })\r\n    return { error: false };\r\n  } catch (errorMessage) {\r\n    throw new Error(`An error occured while deleating the post: ${errorMessage}`);\r\n  }\r\n};\r\n\r\nconst createPost = async (data: IPost) => {\r\n  try {\r\n    const response = await\r\n      fetch(url, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(data),\r\n      })\r\n    return await response.json();\r\n  } catch (errorMessage) {\r\n    throw new Error(`An error occured while creating the post: ${errorMessage}`);\r\n  }\r\n};\r\n\r\nconst editPost = async (data: IPost) => {\r\n  try {\r\n    const response = await\r\n      fetch(`${url}/${data.id}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(data),\r\n      })\r\n    return await response.json();\r\n  } catch (errorMessage) {\r\n    throw new Error(`An error occured while editing the post: ${errorMessage}`);\r\n  }\r\n};\r\n\r\nexport { getPosts, getPost, deletePost, createPost, editPost };","import React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { getPosts, deletePost } from \"api/posts\";\nimport { IPost } from \"types/post\";\n\nconst Posts = () => {\n  const [posts, setPosts] = useState([]);\n  const [error, setError] = useState(false);\n  const history = useHistory();\n  const fetchData = async () => {\n    try {\n      const result = await getPosts();\n      setPosts(result);\n    } catch (error) {\n      setError(true);\n    }\n  };\n  const handleDelete = async (id: string | undefined = \"\") => {\n    try {\n      await deletePost(id);\n      fetchData();\n    } catch (error) {\n      setError(true);\n    }\n  };\n  const handleShow = (id: string | undefined = \"\") => {\n    history.push(`/edit/${id}`);\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  return (\n    <div className=\"posts\">\n      {error ? (\n        <div className=\"alert alert-danger\" role=\"alert\">\n          An error occurred. Try again later.\n        </div>\n      ) : (\n        <React.Fragment>\n          <div>\n            <button\n              className=\"btn btn-primary\"\n              onClick={() => history.push(\"/create\")}\n            >\n              Create new entry\n            </button>\n          </div>\n          <br />\n          <table className=\"table\">\n            <thead>\n              <tr>\n                <th scope=\"col\">#</th>\n                <th scope=\"col\">Title</th>\n                <th scope=\"col\">Content</th>\n                <th scope=\"col\"></th>\n                <th scope=\"col\"></th>\n              </tr>\n            </thead>\n            <tbody>\n              {posts.map((post: IPost) => (\n                <tr key={post.id}>\n                  <th scope=\"row\">{post.id}</th>\n                  <td>{post.title}</td>\n                  <td>{post.content}</td>\n                  <td>\n                    <button onClick={() => handleShow(post.id)}>Edit</button>\n                  </td>\n                  <td>\n                    <button onClick={() => handleDelete(post.id)}>\n                      Delete\n                    </button>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </React.Fragment>\n      )}\n    </div>\n  );\n};\n\nexport default Posts;\n","import { IPost, IReducerCreate } from \"types/post\";\r\nimport React, { useState, useReducer } from \"react\";\r\n\r\nconst initialState: IPost = {\r\n  title: \"\",\r\n  content: \"\",\r\n  lat: \"\",\r\n  long: \"\",\r\n  image_url: \"\"\r\n};\r\n\r\nconst reducer = (state: IPost, { field, value }: IReducerCreate) => {\r\n  return {\r\n    ...state,\r\n    [field]: value\r\n  };\r\n};\r\n\r\nconst useHooks = () => {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n  const [disabled, setDisabled] = useState(true);\r\n\r\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    dispatch({ field: e.target.name, value: e.target.value });\r\n  };\r\n\r\n  const checkDisabled = () => {\r\n    const hasEmptyValue: boolean = Object.values(state).indexOf(\"\") >= 0;\r\n    setDisabled(hasEmptyValue);\r\n  }\r\n\r\n  return { state, dispatch, disabled, onChange, checkDisabled };\r\n};\r\n\r\nexport { initialState, reducer, useHooks }","import React from \"react\";\r\nimport { IFormPost } from \"types/post\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst FormPost = (props: IFormPost) => {\r\n  const {\r\n    post: { title, content, lat, long, image_url },\r\n    onChange,\r\n    onSubmit,\r\n    disabled\r\n  } = props;\r\n  const history = useHistory();\r\n  return (\r\n    <form>\r\n      <div className=\"form-group\">\r\n        <label>Title</label>\r\n        <input\r\n          className=\"form-control\"\r\n          value={title}\r\n          name=\"title\"\r\n          onChange={onChange}\r\n        />\r\n      </div>\r\n\r\n      <div className=\"form-group\">\r\n        <label>Content</label>\r\n        <input\r\n          className=\"form-control\"\r\n          value={content}\r\n          name=\"content\"\r\n          onChange={onChange}\r\n        />\r\n      </div>\r\n\r\n      <div className=\"form-group\">\r\n        <label>Latitude</label>\r\n        <input\r\n          className=\"form-control\"\r\n          value={lat}\r\n          name=\"lat\"\r\n          onChange={onChange}\r\n        />\r\n      </div>\r\n\r\n      <div className=\"form-group\">\r\n        <label>Longitude</label>\r\n        <input\r\n          className=\"form-control\"\r\n          value={long}\r\n          name=\"long\"\r\n          onChange={onChange}\r\n        />\r\n      </div>\r\n\r\n      <div className=\"form-group\">\r\n        <label>Image url</label>\r\n        <input\r\n          className=\"form-control\"\r\n          value={image_url}\r\n          name=\"image_url\"\r\n          onChange={onChange}\r\n        />\r\n      </div>\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <div className=\"col-11\">\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-secondary\"\r\n              onClick={() => history.goBack()}\r\n            >\r\n              Back\r\n            </button>\r\n          </div>\r\n          <div className=\"col-1\">\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-primary\"\r\n              onClick={onSubmit}\r\n              disabled={disabled}\r\n            >\r\n              Submit\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default FormPost;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { createPost } from \"api/posts\";\r\nimport { useHooks } from \"utils/hookForm\";\r\nimport FormPost from \"./FormPost\";\r\n\r\nconst Create = () => {\r\n  const { state, disabled, onChange, checkDisabled } = useHooks();\r\n  const [error, setError] = useState(false);\r\n  const history = useHistory();\r\n\r\n  const onSubmit = async () => {\r\n    try {\r\n      await createPost(state);\r\n      history.goBack();\r\n    } catch (error) {\r\n      setError(true);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    checkDisabled();\r\n  }, [state]);\r\n\r\n  return (\r\n    <div className=\"posts\">\r\n      <h4>Create</h4>\r\n      {error ? (\r\n        <div className=\"alert alert-danger\" role=\"alert\">\r\n          An error occurred while your post was submitted. Try again later.\r\n        </div>\r\n      ) : (\r\n        <FormPost\r\n          post={state}\r\n          onChange={onChange}\r\n          onSubmit={onSubmit}\r\n          disabled={disabled}\r\n        ></FormPost>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Create;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { withRouter, useHistory } from \"react-router-dom\";\r\nimport { editPost, getPost } from \"api/posts\";\r\nimport { useHooks, initialState } from \"utils/hookForm\";\r\nimport FormPost from \"./FormPost\";\r\n\r\nconst Edit = withRouter(({ match: { params } }) => {\r\n  const { id } = params;\r\n  const { state, disabled, dispatch, onChange, checkDisabled } = useHooks();\r\n  const [error, setError] = useState(false);\r\n  const history = useHistory();\r\n\r\n  const onSubmit = async () => {\r\n    try {\r\n      await editPost({ ...state, id });\r\n      history.goBack();\r\n    } catch (error) {\r\n      setError(true);\r\n    }\r\n  };\r\n\r\n  const onError = () => {\r\n    dispatch({\r\n      field: \"image_url\",\r\n      value: \"https://picsum.photos/100/100\"\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const result = await getPost(id);\r\n        for (var field in result) {\r\n          if (initialState.hasOwnProperty(field)) {\r\n            dispatch({ field, value: result[field] });\r\n          }\r\n        }\r\n      } catch (error) {\r\n        setError(true);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, [id]);\r\n\r\n  useEffect(() => {\r\n    checkDisabled();\r\n  }, [state]);\r\n\r\n  return (\r\n    <div className=\"posts\">\r\n      <h4>Edit</h4>\r\n      {error ? (\r\n        <div className=\"alert alert-danger\" role=\"alert\">\r\n          An error occurred while your post was submitted. Try again later.\r\n        </div>\r\n      ) : (\r\n        <React.Fragment>\r\n          <label>Tumbnail</label>\r\n          <br/>\r\n          <img\r\n            alt=\"post\"\r\n            src={state.image_url}\r\n            className=\"img-thumbnail\"\r\n            height=\"100\"\r\n            width=\"100\"\r\n            onError={onError}\r\n          />\r\n          <FormPost\r\n            post={state}\r\n            onChange={onChange}\r\n            onSubmit={onSubmit}\r\n            disabled={disabled}\r\n          ></FormPost>\r\n        </React.Fragment>\r\n      )}\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default Edit;\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport \"style/App.css\";\r\nimport Posts from \"./Posts\";\r\nimport Create from \"./Create\";\r\nimport Edit from \"./Edit\";\r\n\r\nconst App = () => (\r\n  <Router>\r\n    <div>\r\n      <Switch>\r\n        <Route path=\"/create\">\r\n          <Create />\r\n        </Route>\r\n        <Route path=\"/edit/:id\">\r\n          <Edit />\r\n        </Route>\r\n        <Route path=\"/\">\r\n          <Posts />\r\n        </Route>\r\n      </Switch>\r\n    </div>\r\n  </Router>\r\n);\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}